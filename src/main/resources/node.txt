Các bảng dữ liệu và mối quan hệ
Users (Người dùng)
Expenses (Chi tiêu)
ExpenseDetails (Chi tiết chi tiêu)
Incomes (Khoản thu)
IncomeDetails (Chi tiết khoản thu)
Balance (Tổng tiền còn lại hoặc nợ)
Posts (Bài đăng)
Comments (Bình luận)
Follows (Theo dõi)
Favorites (Yêu thích)
Admins (Quản trị viên)

Mối quan hệ giữa các bảng:
Users:
Users có thể có nhiều Expenses: Quan hệ 1-n
Users có thể có nhiều Incomes: Quan hệ 1-n
Users có thể viết nhiều Posts: Quan hệ 1-n
Users có thể viết nhiều Comments: Quan hệ 1-n

Posts:
Posts thuộc về một User: Quan hệ n-1
Posts có thể có nhiều Comments: Quan hệ 1-n

Comments:
Comments thuộc về một Post: Quan hệ n-1
Comments thuộc về một User: Quan hệ n-1

Posts (Bài viết):
Posts có thể có nhiều Favorites (1-n)

Users (Người dùng):
Users có thể có nhiều lượt Follows (1-n)
Users có thể có nhiều Favorites (1-n)

Follows (Theo dõi):
Mỗi bản ghi trong Follows là một mối quan hệ theo dõi giữa hai người dùng:
follower_id: ID của người theo dõi (Foreign Key đến Users)
followed_id: ID của người được theo dõi (Foreign Key đến Users)

Favorites (Yêu thích):
Mỗi bản ghi trong Favorites là một mối quan hệ yêu thích giữa một người dùng và một bài viết:
user_id: ID của người dùng (Foreign Key đến Users)
post_id: ID của bài viết được yêu thích (Foreign Key đến Posts)

Follows (Theo dõi):
Mỗi bản ghi trong Follows là một mối quan hệ theo dõi giữa hai người dùng:
follower_id: ID của người theo dõi (Foreign Key đến Users)
followed_id: ID của người được theo dõi (Foreign Key đến Users)

Favorites (Yêu thích):
Mỗi bản ghi trong Favorites là một mối quan hệ yêu thích giữa một người dùng và một bài viết:
user_id: ID của người dùng (Foreign Key đến Users)
post_id: ID của bài viết được yêu thích (Foreign Key đến Posts)

Admins:
Admins quản lý tất cả các thông tin người dùng và bài đăng, nhưng không có quan hệ trực tiếp trong thiết kế cơ sở dữ liệu này.

Bảng Posts:
sql
Sao chép mã
CREATE TABLE Posts (
    post_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
Bảng Comments:
sql
Sao chép mã
CREATE TABLE Comments (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    post_id INT,
    user_id INT,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

Tóm tắt mối quan hệ:
User - Expenses: 1-n
User - Incomes: 1-n
User - Posts: 1-n
User - Comments: 1-n
Expenses - ExpenseDetails: 1-n
Incomes - IncomeDetails: 1-n
Post - Comments: 1-n

* CHÚ Ý: Khi muốn liên kết 2 lớp với nhau thì nên tạo một liên kết gián tiếp kiểu như là tạo 1
biến mới với giá trị của biến vừa tạo xong liên kết với biến mà mình muốn liên kết.

Làm phần phân chia trang và sắp xếp của trang chủ rồi làm phần tìm kiếm rồi sẽ làm phần đăng nhập và đăng ký.

Chua sap xep dc.

@GetMapping("/page/{pageNo}")
public String findPaginated(@PathVariable(value = "pageNo") int pageNo, 
Model model) {
    int pageSize = 10;
    Pageable pageable = PageRequest.of(pageNo - 1, pageSize);

    // Fetch data from both entities
    Page<Khoanchi> pageKC = kcservice.getPage(pageable);
    Page<Khoanthu> pageKT = ktservice.getPage(pageable);

    // Combine the lists
    List<Object> combinedList = new ArrayList<>();
    combinedList.addAll(pageKC.getContent());
    combinedList.addAll(pageKT.getContent());

    // Manual pagination
    int totalItems = combinedList.size();
    int startItem = (pageNo - 1) * pageSize;
    int endItem = Math.min(startItem + pageSize, totalItems);
    List<Object> paginatedList = combinedList.subList(startItem, endItem);

    // Add pagination attributes to the model
    model.addAttribute("currentPage", pageNo);
    model.addAttribute("totalPages", (int) Math.ceil((double) totalItems / pageSize));
    model.addAttribute("totalItems", totalItems);

    model.addAttribute("combinedList", paginatedList);

    Tongtien tt = ttservice.getTongtienbyID(uservice.getUserbyID(1).getIdtongtien().getIdtongtien());
    model.addAttribute("tt", tt);

    return "homepage";
}

@GetMapping("/")
public String getAll(Model model) {
    return findPaginated(1, model);
}

<li th:class="${currentPage == 1} ? 'disabled' : ''">
                <a th:href="@{'/page/1'}">&laquo;</a>
            </li>
            <li th:class="${currentPage == 1} ? 'disabled' : ''">
                <a th:href="@{'/page/' + ${currentPage - 1}}">Previous</a>
            </li>
            <li th:each="i : ${#numbers.sequence(1, totalPages)}" th:class="${currentPage == i} ? 'active' : ''">
                <a th:href="@{'/page/' + ${i}}"
                   th:text="${i}">1</a>
            </li>
            <li th:class="${currentPage == totalPages} ? 'disabled' : ''">
                <a th:href="@{'/page/' + ${currentPage + 1}}">Next</a>
            </li>
            <li th:class="${currentPage == totalPages} ? 'disabled' : ''">
                <a th:href="@{'/page/' + ${totalPages}}">&raquo;</a>
            </li>
